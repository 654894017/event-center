<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
	<!-- 这个配置主要演示了，mysql monitor的配置 -->

	<!-- 这个示例演示了，spring的配置中，可以不需要显示的声明dubbo:application和dubbo:registry的节点配置dubbo，可以在conf的dubbo节点中设置这些信息即可 -->
	<bean class="eventcenter.builder.ExampleService"></bean>
	<context:component-scan base-package="eventcenter.builder.listeners"></context:component-scan>
	<context:component-scan base-package="eventcenter.api"></context:component-scan>

	<!-- 设置这个主要是开启 事件中心的注解方式的事件 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 设置dubbo的application信息 -->
	<dubbo:application name="builder-test" owner="jackyLiu"></dubbo:application>
	<dubbo:registry address="localhost:2181" protocol="zookeeper" ></dubbo:registry>

	<!-- 这个是配置了dubbo的publisher，通过静态的方式，直接在publisher中加入远程端的subscriber坐标 -->
	<!-- 这里只需要在conf的group中设置，如果针对不同的publish设置不同的group，需要在dubboPublish中进行配置 -->
	<conf group="test_log" xmlns="http://code.eventcenter.com/schema/ec" xsi:schemaLocation="http://code.eventcenter.com/schema/ec http://code.eventcenter.com/schema/ec/eventcenter.xsd">
		<!-- 事件发布端，dubbo的基本配置已移至dubbo:application和dubbo:registry中-->
		<dubbo>
			<!-- localEventNames表示发送到远程的事件是否需要在本地消费，如果本地已经存在响应的事件监听器，*表示所有的事件都会经过本地消费 -->
			<!-- subscriberAutowired需要设置为true，他需要动态的监听dubbo的EventSubscriber服务的开启和关闭事件，以便维护自身的关联表 -->
			<dubboPublish localEventNames="*" expiryOffline="600" subscriberAutowired="true">
				<!-- 开启了subscriberAutowired，则不需要配置dubboPublishGroup，如果需要针对其他不同环境下的事件做发送，则可以在这里继续定义 -->
			</dubboPublish>
		</dubbo>
		<!-- 使用mysql的方式记录事件中心的调用详情 -->
		<mysqlMonitor nodeName="testPublish" dataSourceBeanId="ecDataSource" />
	</conf>

	<bean id="ecDataSource"
		  class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<property name="url" value="jdbc:mysql://localhost:3306/event_center?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull"/>
		<property name="username" value="eventcenter"/>
		<property name="password" value="xxxx"></property><!-- 密码自行修改 -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="filters" value="stat,config"/>
		<property name="maxActive" value="10"/>
		<property name="initialSize" value="5"/>
		<property name="maxWait" value="30000"/>
		<property name="minIdle" value="1"/>
		<property name="timeBetweenEvictionRunsMillis" value="3000"/>
		<property name="minEvictableIdleTimeMillis" value="30000"/>
		<property name="validationQuery" value="SELECT 'x'"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="poolPreparedStatements" value="false"/>
	</bean>
</beans>
